generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  name             String
  picture          String?
  googleId         String             @unique
  department       String?
  Posts            Posts[]
  createdAt        DateTime?          @default(now())
  Vote             Vote[]
  Comment          Comment[]
  CommentReactions CommentReactions[]
}

model Posts {
  id                    String                  @id @default(uuid())
  title                 String
  description           String
  location              String
  catogery              String
  image                 String?
  userId                String
  status                Status                  @default(Pending)
  user                  User                    @relation(fields: [userId], references: [id])
  Vote                  Vote[]
  Comment               Comment[]
  createdAt             DateTime                @default(now())
  CommentReactions      CommentReactions[]
  AdminstrativeComments AdminstrativeComments[]
}

enum Status {
  Pending
  Resolved
  InProgress
}

model Vote {
  id        String   @id @default(uuid())
  type      VoteType
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  postId    String
  post      Posts    @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

enum VoteType {
  UpVote
  DownVote
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  post   Posts  @relation(fields: [postId], references: [id])
  postId String

  user             User               @relation(fields: [userId], references: [id])
  userId           String
  parentId         String?
  parent           Comment?           @relation("CommentReplies", fields: [parentId], references: [id])
  replies          Comment[]          @relation("CommentReplies")
  CommentReactions CommentReactions[]
}

model CommentReactions {
  id        String              @id @default(uuid())
  type      CommentReactionType
  createdAt DateTime            @default(now())
  commentId String
  comment   Comment             @relation(fields: [commentId], references: [id])
  userId    String
  User      User                @relation(fields: [userId], references: [id])
  postId    String
  post      Posts               @relation(fields: [postId], references: [id])

  @@unique([commentId, userId])
}

enum CommentReactionType {
  like
}

model AdminstrativeComments {
  id        String                   @id @default(uuid())
  createdAt DateTime                 @default(now())
  postId    String
  post      Posts                    @relation(fields: [postId], references: [id])
  comment   String
  type      AdminstrativeCommentType
}

enum AdminstrativeCommentType {
  internal
  status
  public
}
